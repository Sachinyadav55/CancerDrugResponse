if(strtrim(input[i], 1) == ">") {
if(currentSeq == 0) {
writeLines(paste(input[i],"\t"), output, sep="")
currentSeq <- currentSeq + 1
} else {
writeLines(paste("\n",input[i],"\t", sep =""), output, sep="")
}
} else {
writeLines(paste(input[i]), output, sep="")
}
}
close(output)
swirl()
swirl
library.packages(swirl)
?library
library(swirl)
swirl()
install_course("Getting and Cleaning Data")
swirl()
library(swirl)
swirl()
exit()
play
play()
library(swirl)
swirl()
5 +7
x <- 5 +7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z *2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z *2 + 1000
my_div
play()
library(swirl)
swirl()
play()
library(swirl)
swirl()
getwd()
ls()
x <- 9
ls()
dir()
?list.files
args(list.files)
old.dir <- getwd()
dir.create(TESTDIR)
dir.create(testdir)
dir.create("testdir")
setwd("testdir")
file.create(mytest.R)
file.create("mytest.R")
LS()
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
nxt()
file.path("mytest3.R")
file.path('folder1','folder2')
/dir.create
?dir.creatw
?dir.creatw
?dir.create
dir()
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
setwd(old.dir)
library(swirl)
swirl()
1:20
pi:10
15:1
?':'
seq(1.20)
seq(1,20)
seq(0,10, by=0.5)
my_seq <- seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), eacg = 10)
rep(c(0,1,2), each = 10)
num_vect <- c(0.5, 55, -10 , 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is)
my_char <- c("My", "name", "is)
my_char <- c("My", "name", "is")
my_char
(my_char, collapse = " ")
(my_char, collapse = " ")
paste(my_char, collapse = " ")
c(my_char, "Ramit")
my_name <- c(my_char, "Ramit")
my_name
paste(my_name, collapse = " ")
paste("Hello",
| "world!", sep = " ")
paste("Hello","world!", sep = " ")
paste(c("X", "Y", "Z")",1:3, sep = "")
paste(c("X", "Y", "Z"),1:3, sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x *3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
library(swirl)
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)
y <- x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[!c(2,10)]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect1,vect2)
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
library("swirl")
swirl()
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
matrix(1:20,4,5)
my_matrix2 <- matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients <- c("Bill", "Gina", "Kelly","Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp","rating", "test")
colnames(cnames)
colnames(my_data) <- cnames
my_data
library("swirl")
swirl()
exit
play()
library("swirl")
swirl()
play()
library("swirl")
swirl()
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames,my_data)
colnames(my_data, cnames)
colnames(my_data)
colnames(my_data) <- cnames
my_data
install.packages("affy")
install.packages(affy)
install.packages("affydata")
source("http://bioconductor.org/biocLite.R")
biocLite("Affy")
2
biocLite("affy")
R CMD INSTALL --merge-multiarch KEADrugResponse_*.tar.gz
INSTALL --merge-multiarch KEADrugResponse_*.tar.gz
library(KEADrugResponse); library(affy);
cd ~/KEADrugResponse
cd ~/Documents/KEADrugResponse
cd ~Documents/KEADrugResponse
ls
getwd()
?setwd
setwd("/Users/ramitb/Documents/KEADrugResponse")
biocValid()
library("biocLite")
library("bioconductor")
source("http://bioconductor.org/biocLite.R")
?biocLite
biocLiteValid()
biocValid("lemma")
biocValid()
bioLite("limma")
biocLite("limma")
library("swirl")
swirl()
TRUE == TRUE
play)
play())
play()
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!5==7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE).
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 | > 8 || 6 != 8 && 4 > 3.9
5 > 8 || 6 != 8 && 4 > 3.9
TRUE(6 > 4)
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints >7)
any(ints<0)
all(ints>0)
source("https://bioconductor.org/biocLite.R")
biocLite("affy")
browseVignettes("affy")
biocLit("affydata")
biocLite("affydata")
browseVignettes("affydata")
?Dilution
??Dilution
library(affydata)
data(Dilution)
Dilution
phenoData(Dilution)
install.packages("~/Documents/KEA_DrugResponse/build/KEADrugResponse_0.1.2.tar.gz", repos = NULL, type = "source")
library(KEADrugResponse); library(affy);
DrugResponse.predict(patient_inputfile, inputfile_format, sample_name, path_to_model)
DrugResponse.predict(patient_inputfile, 'cel', sample_name, 'KEA_DrugResponse/data')
DrugResponse.predict('KEA_DrugResponse/test_data', 'cel', '183p', 'KEA_DrugResponse/data')
DrugResponse.predict('KEA_DrugResponse/test_data/183p_229p_242p_317p_336p_369p_413p_537p_3ex.tsv', 'cel', '183p', 'KEA_DrugResponse/data')
DrugResponse.predict('KEA_DrugResponse/test_data/183p_229p_242p_317p_336p_369p_413p_537p_3ex.tsv', 'exp', '183p', 'KEA_DrugResponse/data')
DrugResponse.predict('KEA_DrugResponse/test_data/183p_229p_242p_317p_336p_369p_413p_537p_3ex.tsv', 'tsv', '183p', 'KEA_DrugResponse/data')
DrugResponse.predict('/Users/ramitb/Documents/KEA_DrugResponse/KEADrugResponse/test_data/183p_229p_242p_317p_336p_369p_413p_537p_3ex.tsv', 'tsv', '183p', '/Users/ramitb/Documents/KEA_DrugResponse/KEA_DrugResponse/data')
DrugResponse.predict('/Users/ramitb/Documents/KEA_DrugResponse/KEADrugResponse/test_data/183p_229p_242p_317p_336p_369p_413p_537p_3ex.tsv', 'tsv', '183p', '/Users/ramitb/Documents/KEA_DrugResponse/KEA_DrugResponse/data')
DrugResponse.predict('/Users/ramitb/Documents/KEA_DrugResponse/KEADrugResponse/test_data/183p_229p_242p_317p_336p_369p_413p_537p_3ex.tsv', 'tsv', '183p', '/Users/ramitb/Documents/KEA_DrugResponse/KEA_DrugResponse/data')
DrugResponse.predict('/Users/ramitb/Documents/KEA_DrugResponse/KEADrugResponse/test_data/183p_229p_242p_317p_336p_369p_413p_537p_3ex.tsv', 'tsv', '183p', '/Users/ramitb/Documents/KEA_DrugResponse/KEA_DrugResponse/data')
DrugResponse.predict('/Users/ramitb/Documents/KEA_DrugResponse/KEADrugResponse/test_data/183p_229p_242p_317p_336p_369p_413p_537p_3ex.tsv', 'tsv', '183p', '/Users/ramitb/Documents/KEA_DrugResponse/KEA_DrugResponse/data')
DrugResponse.predict('./KEA_DrugResponse/KEADrugResponse/test_data/183p_229p_242p_317p_336p_369p_413p_537p_3ex.tsv', 'exp', '183p', './KEA_DrugResponse/KEA_DrugResponse/data')
DrugResponse.predict('/Users/ramitb/Documents/KEA_DrugResponse/KEADrugResponse/test_data/183p_229p_242p_317p_336p_369p_413p_537p_3ex.tsv', 'tsv', '183p', '/Users/ramitb/Documents/KEA_DrugResponse/KEA_DrugResponse/data')
DrugResponse.predict('/Users/ramitb/Documents/KEA_DrugResponse/KEADrugResponse/test_data/183p_229p_242p_317p_336p_369p_413p_537p_3ex.tsv', 'exp', '183p', '/Users/ramitb/Documents/KEA_DrugResponse/KEA_DrugResponse/data')
DrugResponse.predict('/Users/ramitb/Documents/KEA_DrugResponse/KEADrugResponse/test_data/183p_229p_242p_317p_336p_369p_413p_537p_3ex.tsv', 'exp', '183p', '/Users/ramitb/Documents/KEA_DrugResponse/KEA_DrugResponse/data')
DrugResponse.predict('/Users/ramitb/Documents/KEA_DrugResponse/KEADrugResponse/test_data/183p_229p_242p_317p_336p_369p_413p_537p_3ex.tsv', 'exp', '183p', '/Users/ramitb/Documents/KEA_DrugResponse/KEA_DrugResponse/data')
library(KEADrugResponse); library(affy);
DrugResponse.predict('/Users/ramitb/Documents/KEA_DrugResponse/KEADrugResponse/test_data/183p_229p_242p_317p_336p_369p_413p_537p_3ex.tsv', 'exp', '183p', '/Users/ramitb/Documents/KEA_DrugResponse/KEA_DrugResponse/data')
DrugResponse.predict('/Users/ramitb/Documents/KEA_DrugResponse/KEADrugResponse/test_data/183p_229p_242p_317p_336p_369p_413p_537p_3ex.tsv', 'exp', '183p', '/Users/ramitb/Documents/KEA_DrugResponse/KEADrugResponse/data')
DrugResponse.predict('/Users/ramitb/Documents/KEA_DrugResponse/KEADrugResponse/test_data/183p_229p_242p_317p_336p_369p_413p_537p_3ex.tsv', 'exp', c('183p', '229p'), '/Users/ramitb/Documents/KEA_DrugResponse/KEADrugResponse/data')
DrugResponse.predict('/Users/ramitb/Documents/KEA_DrugResponse/KEADrugResponse/test_data/545R_992om_3ex.tsv', 'exp', c('545R', '992om'), '/Users/ramitb/Documents/KEA_DrugResponse/KEADrugResponse/data')
DrugResponse.predict('/Users/ramitb/Documents/KEA_DrugResponse/KEADrugResponse/test_data/545R_992om_3ex.tsv', 'exp', c('545R', '992om'), '/Users/ramitb/Documents/KEA_DrugResponse/KEADrugResponse/data')
install.packages("e1071")
# Copyright (C) 2011  John Colby
# http://github.com/johncolby/SVM-RFE
# Start up an R session in the SVM-RFE directory. Then work through these commands.
# Set up R environment
set.seed(12345)
library(e1071)
source('/Users/ramitb/Documents/SVM-RFE/msvmRFE.R')
load('/Users/ramitb/Documents/SVM-RFE/demo/input.Rdata')
# Take a look at the expected input structure
dim(input)
input[1:5,1:5]
# Basic usage
svmRFE(input, k=10, halve.above=100)
# Set up cross validation
nfold = 10
nrows = nrow(input)
folds = rep(1:nfold, len=nrows)[sample(nrows)]
folds
folds = lapply(1:nfold, function(x) which(folds == x))
folds
# Perform feature ranking on all training sets
results = lapply(folds, svmRFE.wrap, input, k=10, halve.above=100)
length(results)
results
# Obtain top features across ALL folds
top.features = WriteFeatures(results, input, save=F)
head(top.features)
# Estimate generalization error using a varying number of top features
featsweep = lapply(1:5, FeatSweep.wrap, results, input)
featsweep
# Make plot
no.info = min(prop.table(table(input[,1])))
errors = sapply(featsweep, function(x) ifelse(is.null(x), NA, x$error))
dev.new(width=4, height=4, bg='white')
PlotErrors(errors, no.info=no.info)
dev.off()
load("/Users/ramitb/Documents/SVM-RFE/demo/input.Rdata")
load("/Users/ramitb/Documents/SVM-RFE/demo/input.Rdata")
hi = load("/Users/ramitb/Documents/SVM-RFE/demo/input.Rdata")
hi
print hi
hi
install.packages(sigFeature)
install.packages("sigFeature"")
library("swirl")
library(swirl)
swirl()
install.packages(limma)
install.packages("limma")
install.packages("sigFeature")
source("https://bioconductor.org/biocLite.R")
biocLite()
biocLite(c("GenomicFeatures", "AnnotationDbi"))
biocLite("sigFeature")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("sigFeature", version = "devel")
BiocManager::install(version = '3.8')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("sigFeature", version = "devel")
browseVignettes("sigFeature")
browseVignettes("sigFeature")
library(sigFeature)
library(SummarizedExperiment)
data(ExampleRawData, package="sigFeature")
ExampleRawData
x <- t(assays(ExampleRawData)$counts)
y <- colData(ExampleRawData)$sampleLabels
pvals <- sigFeaturePvalue(x,y)
hist(unlist(pvals),breaks=seq(0,0.08,0.0015),col="skyblue",
xlab="p value",ylab="Frequency",main="")
hist(unlist(pvals),breaks=seq(0,0.08,0.0015),col="skyblue",xlab="p value",ylab="Frequency",main="")
hist(unlist(pvals),breaks=seq(0,0.08,0.0015),col="skyblue",xlab="p value",ylab="Frequency",main="")
data(sigfeatureRankedList)
print(sigfeatureRankedList[1:10])
library(e1071)
sigFeature.model=svm(x[ ,sigfeatureRankedList[1:1000]], y,
type="C-classification", kernel="linear")
sigFeature.model=svm(x[ ,sigfeatureRankedList[1:1000]], y,type="C-classification", kernel="linear")
summary(sigFeature.model)
data(featureRankedList)
print("Top 10 features are printed below:")
print(featureRankedList[1:10])
RFE.model=svm(x[ ,featureRankedList[1:1000]], y,type="C-classification", kernel="linear")
summary(RFE.model)
pred <- predict(RFE.model, x[ ,featureRankedList[1:1000]])
table(pred,y)
pvalsigFe <- sigFeaturePvalue(x, y, 100, sigfeatureRankedList)
pvalRFE <- sigFeaturePvalue(x, y, 100, featureRankedList)
par(mfrow=c(1,2))
hist(unlist(pvalsigFe),breaks=50, col="skyblue", main=paste("sigFeature"),
xlab="p value")
hist(unlist(pvalRFE),breaks=50, col="skyblue",
main=paste("SVM-RFE"), xlab="p value")
mytitle<-'Box Plot'
boxplot(unlist(pvalsigFe), unlist(pvalRFE), main=mytitle,
names=c("sigFeature", "SVM-RFE"),
ylab="p value", ylim=c(min(unlist(pvalsigFe)), max(unlist(pvalRFE))))
stripchart(unlist(pvalsigFe), vertical=TRUE, method="jitter", add=TRUE, pch=16,
col=c('green'))
stripchart(unlist(pvalRFE), vertical=TRUE, at=2, method="jitter", add=TRUE,
pch=16, col=c('blue'))
grid(nx=NULL, ny=NULL, col="black", lty="dotted")
library("pheatmap")
library("RColorBrewer")
pheatmap(x[ ,sigfeatureRankedList[1:20]], scale="row",
clustering_distance_rows="correlation")
pheatmap(x[ ,featureRankedList[1:20]], scale="row",
clustering_distance_rows="correlation")
data("results")
str(results[1])
FeatureBasedonFrequency <- sigFeatureFrequency(x, results, 400, 400, pf=FALSE)
str(FeatureBasedonFrequency[1])
data("featsweepSigFe")
str(featsweepSigFe[1])
PlotErrors(featsweepSigFe, 0, 0.4)
WritesigFeature(results, x)
WritesigFeature(results, x)
sessionInfo()
biocLite()
library(sigFeature)
library(e1071)
setwd("/Users/ramitb/Documents/Working_copy_kea/KEADrugResponse/data/ColbySVM-RFE/sigFeatureDrug")
x <- read.csv("carboplatinfeatures.csv")
dim(x)
y <- x[1]
x <- x[2:11]
x
system.time(sigfeatureRankedList <- sigFeature(x, y))
sigFeature.model=svm(x[ ,sigfeatureRankedList], y,type="C-classification", kernel="linear")
pred <- predict(sigFeature.model, x[ ,sigfeatureRankedList])
y <- y[,1]
table(pred,y)
system.time(featureRankedList <- svmrfeFeatureRanking(x, y))
pred <- predict(RFE.model, x[ ,featureRankedList])
write.csv(table,file="carboplatinresults.csv")
write.csv(table, file = "carboplatinresults.csv")
table
table <- table(pred,y)
table
write.csv(table, file = "carboplatinresults.csv")
clearPushBack()
exit()
q()
library(sigFeature)
setwd("/Users/ramitb/Documents/Working_copy_kea/KEADrugResponse/data/ColbySVM-RFE/sigFeatureDrug")
x <- read.csv("docetaxelfeatures.csv")
y <- x[1]
dim(x)
x <- x[2:11]
system.time(sigfeatureRankedList <- sigFeature(x, y))
sigFeature.model=svm(x[ ,sigfeatureRankedList], y,type="C-classification", kernel="linear")
pred <- predict(sigFeature.model, x[ ,sigfeatureRankedList])
y <- y[,1]
table <- table(pred,y)
table
write.csv(table, file = "docetaxelresults.csv")
x <- read.csv("doxorubicinfeatures.csv")
y <- x[1]
dim(x)
x <- x[2,19]
system.time(sigfeatureRankedList <- sigFeature(x, y))
x <- read.csv("doxorubicinfeatures.csv")
y <- x[1]
x <- x[2,19]
system.time(sigfeatureRankedList <- sigFeature(x, y))
x
x <- read.csv("doxorubicinfeatures.csv")
y
x <- x[2:19]
system.time(sigfeatureRankedList <- sigFeature(x, y))
sigFeature.model=svm(x[ ,sigfeatureRankedList], y,type="C-classification", kernel="linear")
pred <- predict(sigFeature.model, x[ ,sigfeatureRankedList])
y <- y[,1]
write.csv(table(pred,y), file ='doxorubicinresults.csv')
x <- read.csv("paclitaxelfeatures.csv")
y <- x[1]
dim(x)
x <- x[2:11]
system.time(sigfeatureRankedList <- sigFeature(x, y))
sigFeature.model=svm(x[ ,sigfeatureRankedList], y,type="C-classification", kernel="linear")
pred <- predict(sigFeature.model, x[ ,sigfeatureRankedList])
y <- y[,1]
write.csv(table(pred,y), file = "paclitaxelresults.csv")
x <- read.csv("gemcitabinefeatures.csv")
y <- x[1]
dim(x)
x <- x[2:33]
system.time(sigfeatureRankedList <- sigFeature(x, y))
sigFeature.model=svm(x[ ,sigfeatureRankedList], y,type="C-classification", kernel="linear")
pred <- predict(sigFeature.model, x[ ,sigfeatureRankedList])
y <- y[,1]
write.csv(table(pred,y), file = "gemcitabineresults.csv")
